import boto3, csv, io, fnmatch, gzip, json
from urllib.parse import urlparse

s3 = boto3.client("s3")

def parse_s3_uri(uri):
    p = urlparse(uri)
    return p.netloc, p.path.lstrip("/")

def find_csv_file(folder_uri):
    bucket, prefix = parse_s3_uri(folder_uri)
    paginator = s3.get_paginator("list_objects_v2")
    for page in paginator.paginate(Bucket=bucket, Prefix=prefix):
        for obj in page.get("Contents", []):
            name = obj["Key"].split("/")[-1]
            if fnmatch.fnmatch(name.lower(), "*.csv") or fnmatch.fnmatch(name.lower(), "part-*"):
                return f"s3://{bucket}/{obj['Key']}"
    raise FileNotFoundError(f"No CSV found in {folder_uri}")

def read_csv_from_s3(s3_uri):
    u = urlparse(s3_uri)
    body = s3.get_object(Bucket=u.netloc, Key=u.path.lstrip("/"))["Body"].read()
    if s3_uri.lower().endswith(".gz"):
        body = gzip.decompress(body)
    text = body.decode("utf-8", errors="replace")
    f = io.StringIO(text)
    return list(csv.DictReader(f))

def get_unique_counts(rows):
    """Return how many unique MakeModel and Segment values exist"""
    make_models = set()
    segments = set()
    for r in rows:
        mm = (r.get("MakeModel") or r.get("makemodel") or "").strip()
        seg = (r.get("Seg") or r.get("seg") or "").strip()
        if mm:
            make_models.add(mm)
        if seg:
            segments.add(seg)
    return len(make_models), len(segments)

def lambda_handler(event, context):
    MMS_NEW = event["MMS_NEW"]
    MMS_USED = event["MMS_USED"]

    new_csv = find_csv_file(MMS_NEW)
    used_csv = find_csv_file(MMS_USED)

    new_rows = read_csv_from_s3(new_csv)
    used_rows = read_csv_from_s3(used_csv)

    make_model_new, seg_new = get_unique_counts(new_rows)
    make_model_used, seg_used = get_unique_counts(used_rows)

    # Return JSON
    return {
        "MakeModelCounts": {
            "New": make_model_new,
            "Used": make_model_used
        },
        "SegmentCounts": {
            "New": seg_new,
            "Used": seg_used
        }
    }
