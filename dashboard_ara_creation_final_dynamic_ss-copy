#amp_sand_dashboard_sheet_updating_ss
# -*- coding: utf-8 -*-
"""
Safe, surgical caption patch for Excel drawings:
Replaces only the inner text of <a:t> that contains 'specified timeframe and audience'
without reserializing XML (prevents Excel 'content' errors).
"""

import io, os, re, zipfile, shutil, boto3
from pathlib import Path

# ---- S3 paths ----
S3_IN  = "s3://amp-caspex-sowmya/dashboard-output/sanitized_debug_filled.xlsx"
S3_OUT = "s3://amp-caspex-sowmya/dashboard_output/Updated_Dashboard_Hamlin.xlsx"
S3_DBG_PREFIX = "s3://amp-caspex-sowmya/dashboard_output/debug/"

# ---- replacement text (ASCII hyphen to be extra-safe) ----
NEW_TEXT = "Client:Hamlin\nTime_Period:08/09/19_09/09/19"

# ---- helpers ----
def s3split(uri): return uri[5:].split("/", 1)
def s3get(uri):
    b,k = s3split(uri); buf = io.BytesIO()
    boto3.client("s3").download_fileobj(b,k,buf)
    buf.seek(0); return buf.getvalue()
def s3put_bytes(uri, data: bytes):
    b,k = s3split(uri); boto3.client("s3").upload_fileobj(io.BytesIO(data), b, k)

def unzip_to(data: bytes, out_dir: Path):
    if out_dir.exists(): shutil.rmtree(out_dir)
    out_dir.mkdir(parents=True, exist_ok=True)
    with zipfile.ZipFile(io.BytesIO(data)) as z: z.extractall(out_dir)

def rezip_dir(root: Path) -> bytes:
    buf = io.BytesIO()
    with zipfile.ZipFile(buf, "w", zipfile.ZIP_DEFLATED) as z:
        for base, _, files in os.walk(root):
            for f in files:
                p = Path(base)/f
                z.write(p, p.relative_to(root).as_posix())
    buf.seek(0); return buf.getvalue()

# ---- core: patch drawings by raw regex on <a:t>â€¦</a:t> ----
# match a:t opening tag, capture attributes, capture inner text, closing tag
ATAG_RE = re.compile(rb"(<a:t\b[^>]*>)(.*?)(</a:t>)", re.DOTALL | re.IGNORECASE)
TARGET_RE = re.compile(rb"specified\s*time\s*frame|specified\s*timeframe", re.IGNORECASE)

def patch_drawing_xml_bytes(xml_bytes: bytes) -> tuple[bytes, bool, int]:
    changed = False
    matches = 0

    def repl(m):
        nonlocal changed, matches
        open_tag, inner, close_tag = m.group(1), m.group(2), m.group(3)
        # quick filter: only alter blocks whose current text contains the target phrase
        if TARGET_RE.search(inner) and b"audience" in inner.lower():
            matches += 1
            changed = True
            # preserve existing whitespace handling; just replace the inner text
            return open_tag + NEW_TEXT.encode("utf-8") + close_tag
        return m.group(0)

    new_bytes = ATAG_RE.sub(repl, xml_bytes)
    return new_bytes, changed, matches

def main():
    print(f"[INFO] downloading {S3_IN}")
    xdata = s3get(S3_IN)
    work = Path("/tmp/xlsx_patch_safe")
    unzip_to(xdata, work)

    drawings_dir = work/"xl"/"drawings"
    if not drawings_dir.exists():
        print("[INFO] No drawings folder found; nothing to patch.")
        return

    total_changes = 0
    total_files = 0
    for drawing in sorted(drawings_dir.glob("drawing*.xml")):
        b = drawing.read_bytes()
        nb, changed, matches = patch_drawing_xml_bytes(b)
        print(f"[SCAN] {drawing.name}: blocks_matched={matches} changed={changed}")
        if changed:
            drawing.write_bytes(nb)
            # debug upload of the individual drawing
            s3put_bytes(S3_DBG_PREFIX + drawing.name, nb)
            print(f"[DEBUG] uploaded patched {drawing.name} -> {S3_DBG_PREFIX + drawing.name}")
            total_changes += matches
            total_files += 1

    if total_changes == 0:
        print("[INFO] No matching caption found in any drawing*.xml; workbook unchanged.")
        return

    # rezip and upload
    out_bytes = rezip_dir(work)
    s3put_bytes(S3_OUT, out_bytes)
    print(f"[SUCCESS] Patched {total_changes} block(s) across {total_files} file(s).")
    print(f"[SUCCESS] Uploaded updated workbook -> {S3_OUT}")

if __name__ == "__main__":
    main()
