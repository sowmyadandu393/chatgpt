# perfectly working performance window for all sheets

# -*- coding: utf-8 -*-
"""
Hardcoded multi-sheet update (no formulas):
- For sheets 3‚Äì7: Copy B4 style to B6 & C6, set text
- For sheet8.xml: Copy G4 style to G6 & H6, set text
"""

import os, zipfile, tempfile, boto3
import xml.etree.ElementTree as ET

# ---------- S3 CONFIG ----------
S3_IN  = "s3://amp-caspex-sowmya/dashboard_output/Updated_Dashboard_Hamlin.xlsx"
S3_OUT = "s3://amp-caspex-sowmya/dashboard_output/Updated_ss.xlsx"

# ---------- HARDCODED SHEET MAP ----------
SHEETS = {
    "Summary Details": "xl/worksheets/sheet3.xml",
    "Time to Purchase Details - New": "xl/worksheets/sheet4.xml",
    "Time to Purchase Details - Used": "xl/worksheets/sheet5.xml",
    "Top Make, Model Details - New": "xl/worksheets/sheet6.xml",
    "Top Make, Model Details - Used": "xl/worksheets/sheet7.xml",
    "Charting Calculations": "xl/worksheets/sheet8.xml",  # G6 & H6 update
}

# ---------- NAMESPACES ----------
NS = {
    "main":  "http://schemas.openxmlformats.org/spreadsheetml/2006/main",
    "r":     "http://schemas.openxmlformats.org/officeDocument/2006/relationships",
    "mc":    "http://schemas.openxmlformats.org/markup-compatibility/2006",
    "x14ac": "http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac",
}
for p, v in NS.items():
    ET.register_namespace("" if p == "main" else p, v)
def T(local): return f"{{{NS['main']}}}{local}"

# ---------- HELPERS ----------
def s3_split(uri):
    b, k = uri[5:].split("/", 1); return b, k

def ensure_row(ws_root, row_idx):
    sd = ws_root.find(T("sheetData"))
    if sd is None: sd = ET.SubElement(ws_root, T("sheetData"))
    for r in sd.findall(T("row")):
        if int(r.get("r")) == row_idx: return r
    new_r = ET.Element(T("row"), {"r": str(row_idx)})
    rows = sd.findall(T("row"))
    for i, r in enumerate(rows):
        if int(r.get("r")) > row_idx:
            sd.insert(i, new_r); return new_r
    sd.append(new_r); return new_r

def ensure_cell(row_el, col, row_idx):
    ref = f"{col}{row_idx}"
    for c in row_el.findall(T("c")):
        if c.get("r") == ref: return c
    new_c = ET.Element(T("c"), {"r": ref})
    row_el.append(new_c)
    return new_c

def find_cell(ws_root, a1):
    row_idx = int("".join(ch for ch in a1 if ch.isdigit()))
    sd = ws_root.find(T("sheetData"))
    if sd is None: return None, None
    for row in sd.findall(T("row")):
        if int(row.get("r")) == row_idx:
            for c in row.findall(T("c")):
                if c.get("r") == a1: return row, c
            return row, None
    return None, None

def set_inline_string(cell, text, style_index=None):
    for ch in list(cell): cell.remove(ch)
    cell.set("t", "inlineStr")
    if style_index is not None: cell.set("s", style_index)
    is_el = ET.SubElement(cell, T("is"))
    t_el  = ET.SubElement(is_el, T("t"))
    t_el.set("{http://www.w3.org/XML/1998/namespace}space", "preserve")
    t_el.text = text

def update_dimension(ws_root):
    sd = ws_root.find(T("sheetData"))
    if sd is None: return
    max_row = 0; max_col = 0
    for r in sd.findall(T("row")):
        rn = int(r.get("r")); max_row = max(max_row, rn)
        for c in r.findall(T("c")):
            ref = c.get("r")
            letters = "".join(ch for ch in ref if ch.isalpha())
            n = 0
            for ch in letters: n = n * 26 + (ord(ch.upper()) - 64)
            max_col = max(max_col, n)
    if max_row and max_col:
        n = max_col; letters = ""
        while n:
            n, r = divmod(n - 1, 26)
            letters = chr(65 + r) + letters
        dim = ws_root.find(T("dimension"))
        if dim is None:
            dim = ET.Element(T("dimension"))
            ws_root.insert(0, dim)
        dim.set("ref", f"A1:{letters}{max_row}")

# ---------- MAIN ----------
def main():
    s3 = boto3.client("s3")
    in_b, in_k = s3_split(S3_IN)
    out_b, out_k = s3_split(S3_OUT)

    tmp = tempfile.mkdtemp(prefix="xlsx_b6g6_")
    in_zip, out_zip = os.path.join(tmp, "in.xlsx"), os.path.join(tmp, "out.xlsx")
    unz = os.path.join(tmp, "unz")

    # Download & unzip
    s3.download_file(in_b, in_k, in_zip)
    with zipfile.ZipFile(in_zip, "r") as zf:
        zf.extractall(unz)

    for sheet_name, xml_relpath in SHEETS.items():
        full_path = os.path.join(unz, xml_relpath)
        if not os.path.exists(full_path):
            print(f"‚ö†Ô∏è Missing: {sheet_name} ({xml_relpath}) ‚Äî skipping")
            continue

        ws_tree = ET.parse(full_path)
        ws_root = ws_tree.getroot()

        # Different logic for sheet8.xml (G/H columns)
        if xml_relpath.endswith("sheet8.xml"):
            print(f"‚úèÔ∏è Editing (G6/H6): {sheet_name}")
            _, g4 = find_cell(ws_root, "G4")
            style_g4 = g4.get("s") if (g4 is not None and g4.get("s")) else None
            _, f4 = find_cell(ws_root, "F4")
            style_f4 = f4.get("s") if (f4 is not None and f4.get("s")) else None
            r6 = ensure_row(ws_root, 6)
            g6 = ensure_cell(r6, "F", 6)
            h6 = ensure_cell(r6, "G", 6)
            set_inline_string(g6, "Performance Window", style_f4)
            set_inline_string(h6, "08/10/19_09/10/19", style_g4)
        else:
            print(f"‚úèÔ∏è Editing (B6/C6): {sheet_name}")
            _, b4 = find_cell(ws_root, "B4")
            style_b4 = b4.get("s") if (b4 is not None and b4.get("s")) else None
            r6 = ensure_row(ws_root, 6)
            b6 = ensure_cell(r6, "B", 6)
            c6 = ensure_cell(r6, "C", 6)
            set_inline_string(b6, "Performance Window", style_b4)
            set_inline_string(c6, "08/10/19_09/10/19", style_b4)

        update_dimension(ws_root)
        ws_tree.write(full_path, encoding="utf-8", xml_declaration=True)
        print(f"‚úÖ Done: {sheet_name}")

    # Remove calcChain
    calc_chain = os.path.join(unz, "xl", "calcChain.xml")
    if os.path.exists(calc_chain):
        os.remove(calc_chain)
        print("üßπ Removed xl/calcChain.xml")

    # Rezip
    with zipfile.ZipFile(out_zip, "w", zipfile.ZIP_DEFLATED) as z:
        for folder, _, files in os.walk(unz):
            for fn in files:
                full = os.path.join(folder, fn)
                arc = os.path.relpath(full, unz)
                z.write(full, arc)

    s3.upload_file(out_zip, out_b, out_k)
    print(f"üöÄ Uploaded: {S3_OUT}")

if __name__ == "__main__":
    main()
