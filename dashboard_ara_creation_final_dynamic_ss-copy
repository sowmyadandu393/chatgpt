# interchanging b5 to b6 
# -*- coding: utf-8 -*-
"""
Sheets 3‚Äì7:
  - Write B6="Performance Window", C6="08/10/19_09/10/19" with B4 style
  - TRUE SWAP B5 <-> B6  (content + style)
  - COPY C6 -> C5, then CLEAR C6
Sheet8 untouched.
"""

import os, zipfile, tempfile, boto3
import xml.etree.ElementTree as ET

# ---------- S3 CONFIG ----------
S3_IN  = "s3://amp-caspex-sowmya/dashboard_output/Updated_ss.xlsx"
S3_OUT = "s3://amp-caspex-sowmya/dashboard_output/Updated_swapped_final.xlsx"

# ---------- SHEETS (3‚Äì7 only) ----------
SHEETS = {
    "Summary Details": "xl/worksheets/sheet3.xml",
    "Time to Purchase Details - New": "xl/worksheets/sheet4.xml",
    "Time to Purchase Details - Used": "xl/worksheets/sheet5.xml",
    "Top Make, Model Details - New": "xl/worksheets/sheet6.xml",
    "Top Make, Model Details - Used": "xl/worksheets/sheet7.xml",
}

# ---------- NAMESPACES ----------
NS = {
    "main":  "http://schemas.openxmlformats.org/spreadsheetml/2006/main",
    "r":     "http://schemas.openxmlformats.org/officeDocument/2006/relationships",
    "mc":    "http://schemas.openxmlformats.org/markup-compatibility/2006",
    "x14ac": "http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac",
}
for p, v in NS.items():
    ET.register_namespace("" if p == "main" else p, v)
def T(local): return f"{{{NS['main']}}}{local}"

# ---------- helpers ----------
def s3_split(uri):
    b, k = uri[5:].split("/", 1); return b, k

def ensure_row(ws_root, row_idx):
    sd = ws_root.find(T("sheetData"))
    if sd is None: sd = ET.SubElement(ws_root, T("sheetData"))
    for r in sd.findall(T("row")):
        if int(r.get("r")) == row_idx: return r
    new_r = ET.Element(T("row"), {"r": str(row_idx)})
    rows = sd.findall(T("row"))
    for i, r in enumerate(rows):
        if int(r.get("r")) > row_idx:
            sd.insert(i, new_r); return new_r
    sd.append(new_r); return new_r

def ensure_cell(row_el, col, row_idx):
    ref = f"{col}{row_idx}"
    for c in row_el.findall(T("c")):
        if c.get("r") == ref: return c
    new_c = ET.Element(T("c"), {"r": ref})
    row_el.append(new_c)
    return new_c

def find_cell(ws_root, a1):
    row_idx = int("".join(ch for ch in a1 if ch.isdigit()))
    sd = ws_root.find(T("sheetData"))
    if sd is None: return None, None
    for row in sd.findall(T("row")):
        if int(row.get("r")) == row_idx:
            for c in row.findall(T("c")):
                if c.get("r") == a1: return row, c
            return row, None
    return None, None

def set_inline_string(cell, text, style_index=None):
    for ch in list(cell): cell.remove(ch)
    cell.attrib.pop("t", None)
    cell.set("t", "inlineStr")
    if style_index is not None: cell.set("s", style_index)
    is_el = ET.SubElement(cell, T("is"))
    t_el  = ET.SubElement(is_el, T("t"))
    t_el.set("{http://www.w3.org/XML/1998/namespace}space", "preserve")
    t_el.text = text

def deep_copy(elem):
    new = ET.Element(elem.tag, elem.attrib)
    new.text, new.tail = elem.text, elem.tail
    for ch in list(elem): new.append(deep_copy(ch))
    return new

def clone_cell_contents(src, dst):
    """Clone full XML (formula/value/inlineStr/style) from src -> dst."""
    ref = dst.get("r")
    for ch in list(dst): dst.remove(ch)
    for k in list(dst.attrib.keys()):
        if k != "r": dst.attrib.pop(k, None)
    if src is not None:
        for k, v in src.attrib.items():
            if k != "r": dst.set(k, v)
        for ch in list(src): dst.append(deep_copy(ch))
    dst.set("r", ref)

def clear_cell(cell):
    if cell is None: return
    for ch in list(cell): cell.remove(ch)
    for k in list(cell.attrib.keys()):
        if k not in ["r"]: cell.attrib.pop(k, None)

def update_dimension(ws_root):
    sd = ws_root.find(T("sheetData"))
    if sd is None: return
    max_row = 0; max_col = 0
    for r in sd.findall(T("row")):
        rn = int(r.get("r")); max_row = max(max_row, rn)
        for c in r.findall(T("c")):
            ref = c.get("r")
            letters = "".join(ch for ch in ref if ch.isalpha())
            n = 0
            for ch in letters: n = n*26 + (ord(ch.upper())-64)
            max_col = max(max_col, n)
    if max_row and max_col:
        n = max_col; letters = ""
        while n:
            n, r = divmod(n-1, 26)
            letters = chr(65+r) + letters
        dim = ws_root.find(T("dimension"))
        if dim is None:
            dim = ET.Element(T("dimension"))
            ws_root.insert(0, dim)
        dim.set("ref", f"A1:{letters}{max_row}")

# ---------- main ----------
def main():
    s3 = boto3.client("s3")
    in_b, in_k = s3_split(S3_IN)
    out_b, out_k = s3_split(S3_OUT)

    tmp = tempfile.mkdtemp(prefix="xlsx_fix_swap_")
    in_zip, out_zip = os.path.join(tmp, "in.xlsx"), os.path.join(tmp, "out.xlsx")
    unz = os.path.join(tmp, "unz")

    # fetch + unzip
    s3.download_file(in_b, in_k, in_zip)
    with zipfile.ZipFile(in_zip, "r") as zf: zf.extractall(unz)

    for sheet_name, xml_relpath in SHEETS.items():
        full = os.path.join(unz, xml_relpath)
        if not os.path.exists(full):
            print(f"‚ö†Ô∏è {sheet_name} missing ({xml_relpath}) ‚Äî skip"); continue

        ws_tree = ET.parse(full); ws_root = ws_tree.getroot()

        # styles from B4
        _, b4 = find_cell(ws_root, "B4")
        style_b4 = b4.get("s") if (b4 is not None and b4.get("s")) else None

        # ensure rows/cells
        r6 = ensure_row(ws_root, 6)
        b6 = ensure_cell(r6, "B", 6)
        c6 = ensure_cell(r6, "C", 6)

        # write labels
        set_inline_string(b6, "Performance Window", style_b4)
        set_inline_string(c6, "08/10/19_09/10/19", style_b4)

        # B5 <-> B6 true swap
        _, b5 = find_cell(ws_root, "B5")
        if b5 is None:
            r5 = ensure_row(ws_root, 5)
            b5 = ensure_cell(r5, "B", 5)
        tmp = ET.Element(T("c"), {"r": "TMP"})
        clone_cell_contents(b5, tmp)
        clone_cell_contents(b6, b5)
        clone_cell_contents(tmp, b6)

        # COPY C6 -> C5, then CLEAR C6
        _, c5 = find_cell(ws_root, "C5")
        if c5 is None:
            r5 = ensure_row(ws_root, 5)
            c5 = ensure_cell(r5, "C", 5)
        clone_cell_contents(c6, c5)
        clear_cell(c6)

        update_dimension(ws_root)
        ws_tree.write(full, encoding="utf-8", xml_declaration=True)
        print(f"‚úÖ {sheet_name} done")

    # cleanup calcChain
    calc = os.path.join(unz, "xl", "calcChain.xml")
    if os.path.exists(calc):
        os.remove(calc)
        print("üßπ removed xl/calcChain.xml")

    # rezip + upload
    with zipfile.ZipFile(out_zip, "w", zipfile.ZIP_DEFLATED) as z:
        for folder, _, files in os.walk(unz):
            for fn in files:
                fp = os.path.join(folder, fn)
                z.write(fp, os.path.relpath(fp, unz))
    s3.upload_file(out_zip, out_b, out_k)
    print(f"üöÄ Uploaded: {S3_OUT}")

if __name__ == "__main__":
    main()
